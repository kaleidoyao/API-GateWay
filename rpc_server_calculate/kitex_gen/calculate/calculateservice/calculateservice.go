// Code generated by Kitex v0.6.1. DO NOT EDIT.

package calculateservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	calculate "github.com/kaleidoyao/API-GateWay/rpc_server_calculate/kitex_gen/calculate"
)

func serviceInfo() *kitex.ServiceInfo {
	return calculateServiceServiceInfo
}

var calculateServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "calculateService"
	handlerType := (*calculate.CalculateService)(nil)
	methods := map[string]kitex.MethodInfo{
		"calculateMethod": kitex.NewMethodInfo(calculateMethodHandler, newCalculateServiceCalculateMethodArgs, newCalculateServiceCalculateMethodResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "calculate",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func calculateMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*calculate.CalculateServiceCalculateMethodArgs)
	realResult := result.(*calculate.CalculateServiceCalculateMethodResult)
	success, err := handler.(calculate.CalculateService).CalculateMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCalculateServiceCalculateMethodArgs() interface{} {
	return calculate.NewCalculateServiceCalculateMethodArgs()
}

func newCalculateServiceCalculateMethodResult() interface{} {
	return calculate.NewCalculateServiceCalculateMethodResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CalculateMethod(ctx context.Context, request *calculate.CalculateRequest) (r *calculate.CalculateResponse, err error) {
	var _args calculate.CalculateServiceCalculateMethodArgs
	_args.Request = request
	var _result calculate.CalculateServiceCalculateMethodResult
	if err = p.c.Call(ctx, "calculateMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
